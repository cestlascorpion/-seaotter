// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CallReport.proto

#ifndef PROTOBUF_CallReport_2eproto__INCLUDED
#define PROTOBUF_CallReport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#ifdef _WEB_LOGIC
#include "CharSetUtil.hpp"
#endif
// @@protoc_insertion_point(includes)

namespace cestlascorpion {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CallReport_2eproto();
void protobuf_AssignDesc_CallReport_2eproto();
void protobuf_ShutdownFile_CallReport_2eproto();

class CallInfo;
class Reports;

// ===================================================================

class CallInfo : public ::google::protobuf::Message {
 public:
  CallInfo();
  virtual ~CallInfo();
  
  CallInfo(const CallInfo& from);
  
  inline CallInfo& operator=(const CallInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallInfo& default_instance();
  
  void Swap(CallInfo* other);
  
  // implements Message ----------------------------------------------
  
  CallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallInfo& from);
  void MergeFrom(const CallInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);
  
  // required uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // required uint32 total = 3;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 3;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);
  
  // required uint32 success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline ::google::protobuf::uint32 success() const;
  inline void set_success(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:cestlascorpion.CallInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 total_;
  ::google::protobuf::uint32 success_;
  friend void  protobuf_AddDesc_CallReport_2eproto();
  friend void protobuf_AssignDesc_CallReport_2eproto();
  friend void protobuf_ShutdownFile_CallReport_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CallInfo* default_instance_;
};
// -------------------------------------------------------------------

class Reports : public ::google::protobuf::Message {
 public:
  Reports();
  virtual ~Reports();
  
  Reports(const Reports& from);
  
  inline Reports& operator=(const Reports& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reports& default_instance();
  
  void Swap(Reports* other);
  
  // implements Message ----------------------------------------------
  
  Reports* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reports& from);
  void MergeFrom(const Reports& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .cestlascorpion.CallInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::cestlascorpion::CallInfo& info(int index) const;
  inline ::cestlascorpion::CallInfo* mutable_info(int index);
  inline ::cestlascorpion::CallInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::cestlascorpion::CallInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::cestlascorpion::CallInfo >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:cestlascorpion.Reports)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::cestlascorpion::CallInfo > info_;
  friend void  protobuf_AddDesc_CallReport_2eproto();
  friend void protobuf_AssignDesc_CallReport_2eproto();
  friend void protobuf_ShutdownFile_CallReport_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Reports* default_instance_;
};
// ===================================================================


// ===================================================================

// CallInfo

// required uint32 ip = 1;
inline bool CallInfo::has_ip() const {
  return _has_bit(0);
}
inline void CallInfo::clear_ip() {
  ip_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CallInfo::ip() const {
  return ip_;
}
inline void CallInfo::set_ip(::google::protobuf::uint32 value) {
  _set_bit(0);
  ip_ = value;
}

// required uint32 port = 2;
inline bool CallInfo::has_port() const {
  return _has_bit(1);
}
inline void CallInfo::clear_port() {
  port_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CallInfo::port() const {
  return port_;
}
inline void CallInfo::set_port(::google::protobuf::uint32 value) {
  _set_bit(1);
  port_ = value;
}

// required uint32 total = 3;
inline bool CallInfo::has_total() const {
  return _has_bit(2);
}
inline void CallInfo::clear_total() {
  total_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CallInfo::total() const {
  return total_;
}
inline void CallInfo::set_total(::google::protobuf::uint32 value) {
  _set_bit(2);
  total_ = value;
}

// required uint32 success = 4;
inline bool CallInfo::has_success() const {
  return _has_bit(3);
}
inline void CallInfo::clear_success() {
  success_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CallInfo::success() const {
  return success_;
}
inline void CallInfo::set_success(::google::protobuf::uint32 value) {
  _set_bit(3);
  success_ = value;
}

// -------------------------------------------------------------------

// Reports

// repeated .cestlascorpion.CallInfo info = 1;
inline int Reports::info_size() const {
  return info_.size();
}
inline void Reports::clear_info() {
  info_.Clear();
}
inline const ::cestlascorpion::CallInfo& Reports::info(int index) const {
  return info_.Get(index);
}
inline ::cestlascorpion::CallInfo* Reports::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::cestlascorpion::CallInfo* Reports::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cestlascorpion::CallInfo >&
Reports::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::cestlascorpion::CallInfo >*
Reports::mutable_info() {
  return &info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cestlascorpion

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CallReport_2eproto__INCLUDED
