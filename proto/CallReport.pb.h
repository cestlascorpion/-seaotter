// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CallReport.proto

#ifndef PROTOBUF_INCLUDED_CallReport_2eproto
#define PROTOBUF_INCLUDED_CallReport_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_CallReport_2eproto 

namespace protobuf_CallReport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_CallReport_2eproto
namespace scorpion {
class CallInfo;
class CallInfoDefaultTypeInternal;
extern CallInfoDefaultTypeInternal _CallInfo_default_instance_;
class Reports;
class ReportsDefaultTypeInternal;
extern ReportsDefaultTypeInternal _Reports_default_instance_;
}  // namespace scorpion
namespace google {
namespace protobuf {
template<> ::scorpion::CallInfo* Arena::CreateMaybeMessage<::scorpion::CallInfo>(Arena*);
template<> ::scorpion::Reports* Arena::CreateMaybeMessage<::scorpion::Reports>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace scorpion {

// ===================================================================

class CallInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:scorpion.CallInfo) */ {
 public:
  CallInfo();
  virtual ~CallInfo();

  CallInfo(const CallInfo& from);

  inline CallInfo& operator=(const CallInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallInfo(CallInfo&& from) noexcept
    : CallInfo() {
    *this = ::std::move(from);
  }

  inline CallInfo& operator=(CallInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallInfo* internal_default_instance() {
    return reinterpret_cast<const CallInfo*>(
               &_CallInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CallInfo* other);
  friend void swap(CallInfo& a, CallInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallInfo* New() const final {
    return CreateMaybeMessage<CallInfo>(NULL);
  }

  CallInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallInfo& from);
  void MergeFrom(const CallInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // required uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // required uint32 total = 3;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 3;
  ::google::protobuf::uint32 total() const;
  void set_total(::google::protobuf::uint32 value);

  // required uint32 success = 4;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  ::google::protobuf::uint32 success() const;
  void set_success(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:scorpion.CallInfo)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();
  void set_has_total();
  void clear_has_total();
  void set_has_success();
  void clear_has_success();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 total_;
  ::google::protobuf::uint32 success_;
  friend struct ::protobuf_CallReport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reports : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:scorpion.Reports) */ {
 public:
  Reports();
  virtual ~Reports();

  Reports(const Reports& from);

  inline Reports& operator=(const Reports& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reports(Reports&& from) noexcept
    : Reports() {
    *this = ::std::move(from);
  }

  inline Reports& operator=(Reports&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reports& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reports* internal_default_instance() {
    return reinterpret_cast<const Reports*>(
               &_Reports_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Reports* other);
  friend void swap(Reports& a, Reports& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reports* New() const final {
    return CreateMaybeMessage<Reports>(NULL);
  }

  Reports* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reports>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reports& from);
  void MergeFrom(const Reports& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reports* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .scorpion.CallInfo info = 1;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  ::scorpion::CallInfo* mutable_info(int index);
  ::google::protobuf::RepeatedPtrField< ::scorpion::CallInfo >*
      mutable_info();
  const ::scorpion::CallInfo& info(int index) const;
  ::scorpion::CallInfo* add_info();
  const ::google::protobuf::RepeatedPtrField< ::scorpion::CallInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:scorpion.Reports)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::scorpion::CallInfo > info_;
  friend struct ::protobuf_CallReport_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CallInfo

// required uint32 ip = 1;
inline bool CallInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallInfo::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 CallInfo::ip() const {
  // @@protoc_insertion_point(field_get:scorpion.CallInfo.ip)
  return ip_;
}
inline void CallInfo::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:scorpion.CallInfo.ip)
}

// required uint32 port = 2;
inline bool CallInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CallInfo::port() const {
  // @@protoc_insertion_point(field_get:scorpion.CallInfo.port)
  return port_;
}
inline void CallInfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:scorpion.CallInfo.port)
}

// required uint32 total = 3;
inline bool CallInfo::has_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallInfo::set_has_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CallInfo::clear_has_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CallInfo::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 CallInfo::total() const {
  // @@protoc_insertion_point(field_get:scorpion.CallInfo.total)
  return total_;
}
inline void CallInfo::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:scorpion.CallInfo.total)
}

// required uint32 success = 4;
inline bool CallInfo::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CallInfo::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CallInfo::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CallInfo::clear_success() {
  success_ = 0u;
  clear_has_success();
}
inline ::google::protobuf::uint32 CallInfo::success() const {
  // @@protoc_insertion_point(field_get:scorpion.CallInfo.success)
  return success_;
}
inline void CallInfo::set_success(::google::protobuf::uint32 value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:scorpion.CallInfo.success)
}

// -------------------------------------------------------------------

// Reports

// repeated .scorpion.CallInfo info = 1;
inline int Reports::info_size() const {
  return info_.size();
}
inline void Reports::clear_info() {
  info_.Clear();
}
inline ::scorpion::CallInfo* Reports::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:scorpion.Reports.info)
  return info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::scorpion::CallInfo >*
Reports::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:scorpion.Reports.info)
  return &info_;
}
inline const ::scorpion::CallInfo& Reports::info(int index) const {
  // @@protoc_insertion_point(field_get:scorpion.Reports.info)
  return info_.Get(index);
}
inline ::scorpion::CallInfo* Reports::add_info() {
  // @@protoc_insertion_point(field_add:scorpion.Reports.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scorpion::CallInfo >&
Reports::info() const {
  // @@protoc_insertion_point(field_list:scorpion.Reports.info)
  return info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace scorpion

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_CallReport_2eproto
